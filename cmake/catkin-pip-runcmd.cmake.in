message(STATUS "Loading catkin-pip-runcmd.cmake from ${CMAKE_CURRENT_LIST_DIR}... ")

if ( CMAKE_BACKWARDS_COMPATIBILITY LESS 2.8 )
	message ( FATAL_ERROR " CMAKE MINIMUM BACKWARD COMPATIBILITY REQUIRED : 2.8 !" )
endif( CMAKE_BACKWARDS_COMPATIBILITY LESS 2.8 )

#
# Important : This script is included by multiple cmake scripts at configure and build time
# So it needs to be idempotent (no change if called multiple time with same settings/environment)
#

# Enforcing one time include https://cmake.org/Wiki/CMake_Performance_Tips#Use_an_include_guard
if(catkin_pip_runcmd_included)
  return()
endif(catkin_pip_runcmd_included)
set(catkin_pip_runcmd_included true)


function(catkin_pip_runcmd)

    set(CATKIN_PIP_COMMAND ${ARGN})

    string(REPLACE ";" " " CATKIN_PIP_CMDSTR "${CATKIN_ENV} ${CATKIN_PIP_COMMAND}")
    message(STATUS "    ... Running ${CATKIN_PIP_CMDSTR} ...")

    execute_process(
      # Note we need to use catkin_env to make sure our envhook is properly loaded
      COMMAND ${CATKIN_ENV} ${CATKIN_PIP_COMMAND}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      RESULT_VARIABLE PIP_RESULT
      OUTPUT_VARIABLE PIP_VARIABLE
      ERROR_VARIABLE PIP_ERROR
    )

    message(STATUS "    ... Done ... [${PIP_RESULT}]: ${PIP_VARIABLE}")
    if (PIP_RESULT)
        message(STATUS "Command ${CATKIN_PIP_CMDSTR} FAILED !")
        message(FATAL_ERROR "${PIP_ERROR}")
    endif()

endfunction()


function(catkin_pip_install_devel_target package_name package_path)
    set(CATKIN_PIP_INSTALL_DEVEL_OUTPUTS
        # ${CATKIN_DEVEL_PREFIX}/${CATKIN_PIP_PYTHON_INSTALL_DIR}/easy-install.pth
        # CAREFUL with multiple outputs : https://cmake.org/Bug/view.php?id=15116
        ${CATKIN_DEVEL_PREFIX}/${CATKIN_PIP_PYTHON_INSTALL_DIR}/${package_name}.egg-link
    )

    set(CATKIN_PIP_COMMAND ${CATKIN_PIP} install -e ${package_path} --prefix "${CATKIN_DEVEL_PREFIX}" ${ARGN})
    # TODO : change to use --target to allow installing duplicate packages... Ref https://github.com/pypa/pip/issues/4243

    string(REPLACE ";" " " CATKIN_PIP_CMDSTR "${CATKIN_ENV} ${CATKIN_PIP_COMMAND}")

    add_custom_command(
      OUTPUT ${CATKIN_PIP_INSTALL_DEVEL_OUTPUTS}
      # Note we need to use catkin_env to make sure our envhook is properly loaded
      COMMAND ${CATKIN_ENV} ${CATKIN_PIP_COMMAND}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      DEPENDS "${package_path}"  # file level dependency : package needs to be in the path
      COMMENT "${CATKIN_PIP_CMDSTR}"
      VERBATIM
    )

    add_custom_target(${package_name} DEPENDS ${CATKIN_PIP_INSTALL_DEVEL_OUTPUTS})  # file level dependency : we need the output of the custom command

    if (CATKIN_PIP_DEVEL_TARGETS)
        add_dependencies(${package_name} ${CATKIN_PIP_DEVEL_TARGETS})  # target level dependency to prevent concurrency
    endif()

    # To have all target install one after the other (even if user attempts concurrent run)
    # since pip doesnt support concurrent runs
    set( CATKIN_PIP_DEVEL_TARGETS
      ${CATKIN_PIP_DEVEL_TARGETS} ${package_name}
      CACHE INTERNAL "List of targets for pip for devel workspace"
    )

endfunction()
